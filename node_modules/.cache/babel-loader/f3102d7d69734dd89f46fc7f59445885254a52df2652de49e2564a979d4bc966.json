{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adore\\\\Documents\\\\GitHub\\\\ISD-final\\\\frontEnd\\\\src\\\\User\\\\ProductContext\\\\ProductContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductContext = /*#__PURE__*/createContext(undefined);\nexport const ProductProvider = ({\n  children\n}) => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [quantity, setQuantity] = useState(1);\n  const [cart, setCart] = useState(() => {\n    const storedCart = localStorage.getItem(\"savedProduct\");\n    return storedCart ? JSON.parse(storedCart) : [];\n  });\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/api/product/get-all\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setProducts(data.data);\n      } catch (error) {\n        console.log(error);\n        console.error(\"Error fetching products\", error);\n        toast.error(\"Failed to fetch products. Please try again later.\");\n      }\n    };\n    fetchProducts();\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"savedProduct\", JSON.stringify(cart));\n  }, [cart]);\n  const addToCart = product => {\n    setCart(prevCart => {\n      if (!Array.isArray(prevCart)) return []; // Ensure prevCart is an array\n      const existingProduct = prevCart.find(item => item._id === product._id);\n      if (existingProduct) {\n        return prevCart.map(item => item._id === product._id ? {\n          ...item,\n          quantity: (item.quantity || 0) + (product.quantity || 1)\n        } : item);\n      }\n      return [...prevCart, {\n        ...product,\n        quantity: product.quantity || 1\n      }];\n    });\n  };\n  const incrQty = productId => {\n    setCart(prevCart => {\n      if (!Array.isArray(prevCart)) return []; // Ensure prevCart is an array\n      return prevCart.map(product => product._id === productId ? {\n        ...product,\n        quantity: (product.quantity || 0) + 1\n      } : product);\n    });\n  };\n  const decrQty = productId => {\n    setCart(prevCart => {\n      if (!Array.isArray(prevCart)) return []; // Ensure prevCart is an array\n\n      let productRemoved = false;\n      const updatedCart = prevCart.map(product => {\n        if (product._id === productId) {\n          const newQuantity = (product.quantity || 0) - 1;\n          if (newQuantity > 0) {\n            return {\n              ...product,\n              quantity: newQuantity\n            };\n          } else {\n            productRemoved = true; // Mark that the product is removed\n            return null; // Mark product for removal\n          }\n        }\n        return product;\n      }).filter(product => product !== null); // Remove null values\n\n      if (productRemoved) {\n        toast.warning(\"Product removed from cart\");\n      }\n      return updatedCart;\n    });\n  };\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const handleSearch = searchTerm => {\n    const results = products.filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredProducts(results);\n    localStorage.setItem(\"searchResults\", JSON.stringify(results));\n    localStorage.setItem(\"searchTerm\", searchTerm);\n  };\n  const loadStoredSearchResults = () => {\n    const storedResults = localStorage.getItem(\"searchResults\");\n    const storedTerm = localStorage.getItem(\"searchTerm\");\n    if (storedResults) {\n      setFilteredProducts(JSON.parse(storedResults));\n    }\n    if (storedTerm) {\n      // Optional: Set the search term if needed\n    }\n  };\n  const handleSetQuantity = qty => {\n    setQuantity(qty);\n  };\n  return /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n    value: {\n      products,\n      filteredProducts,\n      handleSearch,\n      loadStoredSearchResults,\n      cart,\n      addToCart,\n      incrQty,\n      decrQty,\n      quantity,\n      handleSetQuantity\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductProvider, \"InRwcfYgIs6yy/8+CSiEcEK4T28=\");\n_c = ProductProvider;\nexport const useProductContext = () => {\n  _s2();\n  const context = useContext(ProductContext);\n  if (context === undefined) {\n    throw new Error(\"useProductContext must be used within a ProductProvider\");\n  }\n  return context;\n};\n_s2(useProductContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ProductProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","toast","jsxDEV","_jsxDEV","ProductContext","undefined","ProductProvider","children","_s","products","setProducts","quantity","setQuantity","cart","setCart","storedCart","localStorage","getItem","JSON","parse","fetchProducts","response","fetch","ok","Error","status","data","json","error","console","log","setItem","stringify","addToCart","product","prevCart","Array","isArray","existingProduct","find","item","_id","map","incrQty","productId","decrQty","productRemoved","updatedCart","newQuantity","filter","warning","filteredProducts","setFilteredProducts","handleSearch","searchTerm","results","name","toLowerCase","includes","loadStoredSearchResults","storedResults","storedTerm","handleSetQuantity","qty","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useProductContext","_s2","context","$RefreshReg$"],"sources":["C:/Users/adore/Documents/GitHub/ISD-final/frontEnd/src/User/ProductContext/ProductContext.tsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useState,\r\n  useContext,\r\n  ReactNode,\r\n  useEffect,\r\n} from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\ninterface Product {\r\n  _id: string;\r\n  name: string;\r\n  image: string | string[];\r\n  price: number;\r\n  countInStock: number;\r\n  rating: number;\r\n  onSale?: boolean;\r\n  discount: number;\r\n  type: string;\r\n  quantity?: number;\r\n  isfavourite?: boolean;\r\n}\r\n\r\ninterface ProductContextType {\r\n  products: Product[];\r\n  filteredProducts: Product[];\r\n  handleSearch: (searchTerm: string) => void;\r\n  loadStoredSearchResults: () => void;\r\n  cart: Product[];\r\n  addToCart: (product: Product) => void;\r\n  incrQty: (productId: string) => void;\r\n  decrQty: (productId: string) => void;\r\n  handleSetQuantity: (quantity: number) => void;\r\n  quantity: number;\r\n}\r\n\r\nconst ProductContext = createContext<ProductContextType | undefined>(undefined);\r\n\r\nexport const ProductProvider = ({ children }: { children: ReactNode }) => {\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [cart, setCart] = useState<Product[]>(() => {\r\n    const storedCart = localStorage.getItem(\"savedProduct\");\r\n    return storedCart ? JSON.parse(storedCart) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:3001/api/product/get-all\"\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setProducts(data.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n        console.error(\"Error fetching products\", error);\r\n        toast.error(\"Failed to fetch products. Please try again later.\");\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"savedProduct\", JSON.stringify(cart));\r\n  }, [cart]);\r\n\r\n  const addToCart = (product: Product) => {\r\n    setCart((prevCart) => {\r\n      if (!Array.isArray(prevCart)) return []; // Ensure prevCart is an array\r\n      const existingProduct = prevCart.find((item) => item._id === product._id);\r\n      if (existingProduct) {\r\n        return prevCart.map((item) =>\r\n          item._id === product._id\r\n            ? {\r\n                ...item,\r\n                quantity: (item.quantity || 0) + (product.quantity || 1),\r\n              }\r\n            : item\r\n        );\r\n      }\r\n      return [...prevCart, { ...product, quantity: product.quantity || 1 }];\r\n    });\r\n  };\r\n\r\n  const incrQty = (productId: string) => {\r\n    setCart((prevCart) => {\r\n      if (!Array.isArray(prevCart)) return []; // Ensure prevCart is an array\r\n      return prevCart.map((product) =>\r\n        product._id === productId\r\n          ? { ...product, quantity: (product.quantity || 0) + 1 }\r\n          : product\r\n      );\r\n    });\r\n  };\r\n\r\n  const decrQty = (productId: string) => {\r\n    setCart((prevCart) => {\r\n      if (!Array.isArray(prevCart)) return []; // Ensure prevCart is an array\r\n\r\n      let productRemoved = false;\r\n\r\n      const updatedCart = prevCart\r\n        .map((product) => {\r\n          if (product._id === productId) {\r\n            const newQuantity = (product.quantity || 0) - 1;\r\n            if (newQuantity > 0) {\r\n              return { ...product, quantity: newQuantity };\r\n            } else {\r\n              productRemoved = true; // Mark that the product is removed\r\n              return null; // Mark product for removal\r\n            }\r\n          }\r\n          return product;\r\n        })\r\n        .filter((product): product is Product => product !== null); // Remove null values\r\n\r\n      if (productRemoved) {\r\n        toast.warning(\"Product removed from cart\");\r\n      }\r\n\r\n      return updatedCart;\r\n    });\r\n  };\r\n\r\n  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);\r\n\r\n  const handleSearch = (searchTerm: string) => {\r\n    const results = products.filter((product) =>\r\n      product.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setFilteredProducts(results);\r\n    localStorage.setItem(\"searchResults\", JSON.stringify(results));\r\n    localStorage.setItem(\"searchTerm\", searchTerm);\r\n  };\r\n\r\n  const loadStoredSearchResults = () => {\r\n    const storedResults = localStorage.getItem(\"searchResults\");\r\n    const storedTerm = localStorage.getItem(\"searchTerm\");\r\n    if (storedResults) {\r\n      setFilteredProducts(JSON.parse(storedResults));\r\n    }\r\n    if (storedTerm) {\r\n      // Optional: Set the search term if needed\r\n    }\r\n  };\r\n\r\n  const handleSetQuantity = (qty) => {\r\n    setQuantity(qty);\r\n  };\r\n\r\n  return (\r\n    <ProductContext.Provider\r\n      value={{\r\n        products,\r\n        filteredProducts,\r\n        handleSearch,\r\n        loadStoredSearchResults,\r\n        cart,\r\n        addToCart,\r\n        incrQty,\r\n        decrQty,\r\n        quantity,\r\n        handleSetQuantity,\r\n      }}\r\n    >\r\n      {children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useProductContext = (): ProductContextType => {\r\n  const context = useContext(ProductContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useProductContext must be used within a ProductProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}