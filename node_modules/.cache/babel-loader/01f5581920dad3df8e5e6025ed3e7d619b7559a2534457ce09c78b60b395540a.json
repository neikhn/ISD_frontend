{"ast":null,"code":"var _s = $RefreshSig$();\n// useLocalStorage.js\nimport { useState, useEffect } from \"react\";\nfunction useLocalStorage(key, initialValue) {\n  _s();\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(key);\n    if (jsonValue != null) return JSON.parse(jsonValue);\n    return typeof initialValue === \"function\" ? initialValue() : initialValue;\n  });\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newValue = localStorage.getItem(key);\n      setValue(newValue !== null ? JSON.parse(newValue) : initialValue);\n    };\n\n    // Custom event to trigger updates within the app\n    window.addEventListener(\"local-storage\", handleStorageChange);\n    return () => {\n      window.removeEventListener(\"local-storage\", handleStorageChange);\n    };\n  }, [key, initialValue]);\n  const setLocalStorage = newValue => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n    // Dispatch a custom event whenever local storage is updated\n    window.dispatchEvent(new Event(\"local-storage\"));\n  };\n  return [value, setLocalStorage];\n}\n_s(useLocalStorage, \"KKSd0FUFWabJ0XAD7K6CgNXydCc=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","value","setValue","jsonValue","localStorage","getItem","JSON","parse","handleStorageChange","newValue","window","addEventListener","removeEventListener","setLocalStorage","setItem","stringify","dispatchEvent","Event"],"sources":["C:/Users/adore/Documents/GitHub/ISD-final/frontEnd/src/useLocalStorage.js"],"sourcesContent":["// useLocalStorage.js\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(key);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    return typeof initialValue === \"function\" ? initialValue() : initialValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      const newValue = localStorage.getItem(key);\r\n      setValue(newValue !== null ? JSON.parse(newValue) : initialValue);\r\n    };\r\n\r\n    // Custom event to trigger updates within the app\r\n    window.addEventListener(\"local-storage\", handleStorageChange);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"local-storage\", handleStorageChange);\r\n    };\r\n  }, [key, initialValue]);\r\n\r\n  const setLocalStorage = (newValue) => {\r\n    setValue(newValue);\r\n    localStorage.setItem(key, JSON.stringify(newValue));\r\n    // Dispatch a custom event whenever local storage is updated\r\n    window.dispatchEvent(new Event(\"local-storage\"));\r\n  };\r\n\r\n  return [value, setLocalStorage];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACvC,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;IAC3C,IAAIK,SAAS,IAAI,IAAI,EAAE,OAAOG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;IACnD,OAAO,OAAOJ,YAAY,KAAK,UAAU,GAAGA,YAAY,CAAC,CAAC,GAAGA,YAAY;EAC3E,CAAC,CAAC;EAEFH,SAAS,CAAC,MAAM;IACd,MAAMY,mBAAmB,GAAGA,CAAA,KAAM;MAChC,MAAMC,QAAQ,GAAGL,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;MAC1CI,QAAQ,CAACO,QAAQ,KAAK,IAAI,GAAGH,IAAI,CAACC,KAAK,CAACE,QAAQ,CAAC,GAAGV,YAAY,CAAC;IACnE,CAAC;;IAED;IACAW,MAAM,CAACC,gBAAgB,CAAC,eAAe,EAAEH,mBAAmB,CAAC;IAE7D,OAAO,MAAM;MACXE,MAAM,CAACE,mBAAmB,CAAC,eAAe,EAAEJ,mBAAmB,CAAC;IAClE,CAAC;EACH,CAAC,EAAE,CAACV,GAAG,EAAEC,YAAY,CAAC,CAAC;EAEvB,MAAMc,eAAe,GAAIJ,QAAQ,IAAK;IACpCP,QAAQ,CAACO,QAAQ,CAAC;IAClBL,YAAY,CAACU,OAAO,CAAChB,GAAG,EAAEQ,IAAI,CAACS,SAAS,CAACN,QAAQ,CAAC,CAAC;IACnD;IACAC,MAAM,CAACM,aAAa,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;EAClD,CAAC;EAED,OAAO,CAAChB,KAAK,EAAEY,eAAe,CAAC;AACjC;AAACb,EAAA,CA7BQH,eAAe;AA+BxB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}